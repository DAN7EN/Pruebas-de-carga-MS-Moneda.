// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import { htmlReport } from "https://raw.githubusercontent.com/benc-uk/k6-reporter/main/dist/bundle.js";

let token = "eyJhbGciOiJSUzI1NiIsImtpZCI6IkYyRDQ2NTgyMUY1QjE2QTU3QkZENDQ3NUVBNzgwRTk1MzlGMTFEOThSUzI1NiIsInR5cCI6ImF0K2p3dCIsIng1dCI6Ijh0UmxnaDliRnFWN19VUjE2bmdPbFRueEhaZyJ9.eyJuYmYiOjE2ODY3NTA5MzUsImV4cCI6MTY4NjgzNzMzNSwiaXNzIjoiaHR0cDovL21zLXNlY3VyaXR5c2VydmljZTo1MDAwIiwiYXVkIjoiaHR0cDovL21zLXNlY3VyaXR5c2VydmljZTo1MDAwL3Jlc291cmNlcyIsImNsaWVudF9pZCI6IlNpaWdvV2ViIiwic3ViIjoiMTA2NjA1NiIsImF1dGhfdGltZSI6MTY4Njc1MDkzNSwiaWRwIjoibG9jYWwiLCJuYW1lIjoiUUFBcnF1aXRlY3R1cmFOdWV2b1NpaWdvTnViZV9QYW8wMDFAeW90bWFpbC5jb20iLCJtYWlsX3NpaWdvIjoiUUFBcnF1aXRlY3R1cmFOdWV2b1NpaWdvTnViZV9QYW8wMDFAeW90bWFpbC5jb20iLCJjbG91ZF90ZW5hbnRfY29tcGFueV9rZXkiOiJRQUFycXVpdGVjdHVyYU51ZXZvU2lpZ29OdWJlX1BhbzAwMSIsInVzZXJzX2lkIjoiMzUyMjYiLCJ0ZW5hbnRfaWQiOiIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTg4NjY1IiwidXNlcl9saWNlbnNlX3R5cGUiOiIwIiwicGxhbl90eXBlIjoiNSIsInRlbmFudF9zdGF0ZSI6IjEiLCJtdWx0aXRlbmFudF9pZCI6IjEwNCIsImNvbXBhbmllcyI6IjIiLCJhcGlfc3Vic2NyaXB0aW9uX2tleSI6IiIsImFjY291bnRhbnQiOiJmYWxzZSIsImp0aSI6IjQ4MTMxNjUzRUUyOEZEQjYyMzlERUQwQ0I3NzBBMzA3IiwiaWF0IjoxNjg2NzUwOTM1LCJzY29wZSI6WyJXZWJBcGkiLCJvZmZsaW5lX2FjY2VzcyJdLCJhbXIiOlsiY3VzdG9tIl19.DDS54PjhwI3l9XNSOEzxPSDGMmS1nibCLYf8CzP5A4clpWvl-Jlc0o-0PVaRDDc_MMQCFEjMNXpOYpZ9bRiY-8kpN3537Q6no9Jd3WVBcnyBntF4G44r7tZwDrLwyEczh-2ZKopExC8Ygzgzt3F4-BDPqJcxgL9vUAPip2WudyOIzCNyqgxpMjZaZUQACh-dLHf0W5AANSqVVkYw5EO4d9TWJ42rMZUZAZOgSKbUSA899RzYAj3pk7JofMgABZrEeLc9iA4JoQiIXr9os2whosL7Mk-27kaC-qbx_BHUUdVuY6RGtk6OhV6TllGyodh_4l4IoFxjGkOVdgMsfPhVJQ";

export let options = { 
  maxRedirects: 4, 
  //Escenarios en rampa
  // stages: [
  //   { duration: "5s", target: 15 },
  //   { duration: "5s", target: 15 },
  //   { duration: "5s", target: 30 },
  //   { duration: "5s", target: 40 },
  //   { duration: "35s", target: 50 },
  //   { duration: "5s", target: 0 },
  // ],
  // stages: [
  //   { duration: "10s", target: 25 },
  //   { duration: "10s", target: 45 },
  //   { duration: "10s", target: 60 },
  //   { duration: "50s", target: 100 },
  //   { duration: "10s", target: 0 },
  // ],
  // stages: [
  //   { duration: "20s", target: 35 },
  //   { duration: "20s", target: 55 },
  //   { duration: "20s", target: 100 },
  //   { duration: "50s", target: 200 },
  //   { duration: "10s", target: 0 },
  // ],
};

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  // postman[Request]({
  //   name: "Health",
  //   id: "05c0f6b2-8757-41a4-9d15-a6adadb156cf",
  //   method: "GET",
  //   address: "http://localhost:5000/health"
  // });

  //Este servicio es usado internamente por GetRateAsync para obtener la tasa desde el servicio externo, cuando no está almacenada en mongo. 
  //Si se le envía un valor de tasa de cambio, este servicio lo ignorará y siempre guardará el que venga desde el servicio externo (OpenExchange).
  // postman[Request]({
  //   name: "Save Global Rate",
  //   id: "d66b7825-8a80-4cb5-b663-dc68ffebdc59",
  //   method: "POST",
  //   address: "https://servicesqa.siigo.com/cross/currency/api/saveglobalrate",
  //   data:
  //     '{\n"exchangeRate":{\n"localMoneyCode": "COP",\n"foreignMoneyCode": "EUR",\n"rate": 0.00026,\n"date": 1686265381\n}\n}',
  //   headers: {
  //     Authorization: token
  //   }
  // });

  //Este servicio permite obtener la tasa de cambio entre dos monedas específicas y en una fecha específica en formato unix.
  //Esta tasa primero la busca en mongo y sino la encuentra allí la buscará en el servicio externo de Open ExChange. 
  postman[Request]({
    name: "Get Rate Value",
    id: "6c2507c2-88a8-45cd-92fc-9e1154aeef5e",
    method: "POST",
    address: "https://servicesqa.siigo.com/cross/currency/api/getratevalue",
    data:
      '{\n"exchangeRate":{\n"localMoneyCode": "COP",\n"foreignMoneyCode": "MXN",\n"date": 1686265381\n}\n}',
    headers: {
      Authorization: token
    }
  });

  //Este servicio permite guardar una tasa de cambio personalizada, que se usa en los casos en los que no se desea usar la proporcionada por el sistema.
  // postman[Request]({
  //   name: "Save Custom Rate",
  //   id: "e3b6e418-4000-46c1-b54f-294e501217ee",
  //   method: "POST",
  //   address: "https://servicesqa.siigo.com/cross/currency/api/savecustomrate",
  //   data:
  //     '{\n"exchangeRate":{\n"localMoneyCode": "COP",\n"foreignMoneyCode": "USD",\n"rate": 0.000244,\n"date": 1686265381\n}\n}',
  //   headers: {
  //     Authorization: token
  //   }
  // });

}
//Aqui exportamos el reporte generado al finalizar las pruebas, el cual se guarda en la carperta Reports
export function handleSummary(data) {
  return {
    //Nombre que llevará el reporte
    "Reports/prueba.html": htmlReport(data),
  };
}
// export function handleSummary(data) {
//   return {
//     "Reports/con_rampa/USV300-TOTALTIEMPO180S-SINRAMPA-getratevalue.html": htmlReport(data),
//   };
// }